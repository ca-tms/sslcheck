package sslcheck.test;

import java.io.ByteArrayInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.HashMap;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.sun.jersey.core.util.Base64;

import sslcheck.core.NotaryManager;
import sslcheck.core.TLSCertificateException;
import sslcheck.core.TLSConnectionInfo;

public class SimpleTestPreconfigured {
	private final static Logger log = LogManager.getRootLogger();

	public static void main(String[] args) {

		log.trace("Initializing...");
		// NotaryConfiguration notaryConf = NotaryConfiguration.getInstance();
		// NotaryRating notaryRating = NotaryRating.getInstance();

		// Some certificates to check...
		HashMap<String, String[]> config = new HashMap<String, String[]>();
		// Correct certificate
		config.put(
				"https://google.com",
				new String[] { "" });
		// config.put(
		// "https://cacert.com",
		// new String[]
		// {"MIIFZDCCA0ygAwIBAgIDC7PGMA0GCSqGSIb3DQEBBQUAMHkxEDAOBgNVBAoTB1Jvb3QgQ0ExHjAcBgNVBAsTFWh0dHA6Ly93d3cuY2FjZXJ0Lm9yZzEiMCAGA1UEAxMZQ0EgQ2VydCBTaWduaW5nIEF1dGhvcml0eTEhMB8GCSqGSIb3DQEJARYSc3VwcG9ydEBjYWNlcnQub3JnMB4XDTEyMDUwNjE4NDY0MVoXDTE0MDUwNjE4NDY0MVowWzELMAkGA1UEBhMCQVUxDDAKBgNVBAgTA05TVzEPMA0GA1UEBxMGU3lkbmV5MRQwEgYDVQQKEwtDQWNlcnQgSW5jLjEXMBUGA1UEAxMOd3d3LmNhY2VydC5vcmcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDeNSAxSFtymeN6rQD69eXIJEnCCP7Z24/fdOgxRDSBhfQDUVhdmsuDOvuziOoWGqRxZPcWdMEMRcJ5SrA2aHIstvnaLhUlxp2fuaeXx9XMCJ9ZmzHZbH4wqLaU+UlhcSsdkPzapf3N3HaUAW8kT4bHEGzObYVCUBxxhpY01EoGRQmnFojzLNF3+0O1npQzXg5MeIWHW/Z+9jE+6odL6IXgg1bvrP4dFgoveTcG6BmJu+50RwHaUad7hQuNeS+pNsVzCiDdMF2qoCQXtAGhnEQ9/KHpBD2zISBVIyEbYxdyU/WxnkaOof63Mf/TAgMNzVN9duqEtFyvvMrQY1XkBBwfAgMBAAGjggERMIIBDTAMBgNVHRMBAf8EAjAAMDQGA1UdJQQtMCsGCCsGAQUFBwMCBggrBgEFBQcDAQYJYIZIAYb4QgQBBgorBgEEAYI3CgMDMAsGA1UdDwQEAwIFoDAzBggrBgEFBQcBAQQnMCUwIwYIKwYBBQUHMAGGF2h0dHA6Ly9vY3NwLmNhY2VydC5vcmcvMIGEBgNVHREEfTB7gg53d3cuY2FjZXJ0Lm9yZ4IRc2VjdXJlLmNhY2VydC5vcmeCEnd3d21haWwuY2FjZXJ0Lm9yZ4IKY2FjZXJ0Lm9yZ4IOd3d3LmNhY2VydC5uZXSCCmNhY2VydC5uZXSCDnd3dy5jYWNlcnQuY29tggpjYWNlcnQuY29tMA0GCSqGSIb3DQEBBQUAA4ICAQA2+uCGX18kZD8gyfj44TlwV4TXJ5BrT0M9qogg2k5u057i+X2ePy3DiE2REyLkU+i5ekH5gvTl74uSJKtpSf/hMyJEByyPyIULhlXCl46z2Z60drYzO4igapCdkm0JthVGvk6/hjdaxgBGhUvSTEP5nLNkDa+uYVHJI58wfX2oh9gqxf8VnMJ8/A8Zi6mYCWUlFUobNd/ozyDZ6WVntrLib85sAFhds93nkoUYxgx1N9Xg/I31/jcL6bqmpRAZcbPtvEom0RyqPLM+AOgySWiYbg1Nl8nKx25C2AuXk63NN4CVwkXpdFF3q5qk1izPruvJ68jNW0pG7nrMQsiY2BCesfGyEzY8vfrMjeR5MLNv5r+obeYFnC1juYp6JBt+thW+xPFzHYLjohKPwo/NbMOjIUM9gv/Pq3rVRPgWru4/8yYWhrmEK370rtlYBUSGRUdR8xed1Jvs+4qJ3s9t41mLSXvUfwyPsT7eoloUAfw3RhdwOzXoC2P6ftmniyu/b/HuYH1AWK+HFtFi9CHiMIqOJMhj/LnzL9udrQOpir7bVej/mlb3kSRo2lZymKOvuMymMpJkvBvUU/QEbCxWZAkTyqL2qlcQhHv7W366DOFjxDqpthaTRD69T8i/2AnsBDjYFxa47DisIvR57rLmE+fILjSvd94N/IpGs3lSOS5JeA=="});//
		// Incorrent, fraudulent, invalid, ... certificates
		config.put(
				"https://google.com",
				new String[] { "MIIDmzCCAoOgAwIBAgIJAPDxpOSQbn4wMA0GCSqGSIb3DQEBBQUAMGQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKDApHb29nbGUgSW5jMRMwEQYDVQQDDApnb29nbGUuY29tMB4XDTE0MDQwNTEyMDY0NFoXDTE1MDQwNTEyMDY0NFowZDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDU1vdW50YWluIFZpZXcxEzARBgNVBAoMCkdvb2dsZSBJbmMxEzARBgNVBAMMCmdvb2dsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/W9/4mL8cobYxLpX/i9tAxF8NWwgb+Q/xt5GIYPHc6ilNkYifUcyGMxSXhulqIvaGV2bEYTien7VE2sVzkc7+kwJg2sjicY93gJD3v9E59zscnmLxvScqADOssIBiMsija3TahMHQp/heu3cKciocucG9P8CElwJV9qJgA6pQIziX/xp7HGp+EC4Lkmi/ACc44Zwd3y2feFscuF9Nt2YFI4/vlfZTfoJyQ3WhU6DdNPW+Jx9SPZ4qhXWvgxNujl9ywbrPsmWO1S3VPWwmic/VUmAQML3STQ1dV06hzxMFxdkgQvhS8pVuAzYKg3LrMiPLk8eKGekRFiIwGQ8ln5wRAgMBAAGjUDBOMB0GA1UdDgQWBBQwO4WJJADe6tzyX5PpGGFQvJHv4jAfBgNVHSMEGDAWgBQwO4WJJADe6tzyX5PpGGFQvJHv4jAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBaoqm47J59CJjR8KzDrFXMuhat24ORUBe4Wdxf5iYHcvupIA+qpMwB3WqSg3HmWUUUKpWCRNmR4HmsHGVPAXnoh0IOrm9DjizVvRyNWxac4JSVokqILLa513+tUEYAgqrGwmkqRAwacPF4k8qN1NTs11aLhVBFX9IOCGpnR26b83h2TX1Ki2zV05k9xhZLdNXyucTMy66ZXuWAuaWpRfz/p4JfHDFQ+gGVjrndRPJUR9P136UIrZd99OrCsSIWUZtKTfeFa/6KtOw/mUvMxW1r/htnGChldpHqjKsLDb9nzTLNv18+CdQJKsXkx8W57jvikwBZxZ8AgNAeTVAMr78l" });

		// Internal processing to convert information in correct format -
		// nevermind that code..
		HashMap<URL, X509Certificate[]> certificates;
		try {
			certificates = new HashMap<URL, X509Certificate[]>();
			CertificateFactory cf = CertificateFactory.getInstance("X.509");
			for (String url : config.keySet()) {
				X509Certificate[] certs = new X509Certificate[config.get(url).length];
				int i = 0;
				for (String base64Cert : config.get(url)) {
					byte[] rawCert = Base64.decode(base64Cert);
					ByteArrayInputStream bais = new ByteArrayInputStream(
							rawCert);
					certs[i] = (X509Certificate) cf.generateCertificate(bais);
					i++;
				}
				certificates.put(new URL(url), certs);
			}
		} catch (CertificateException | MalformedURLException e) {
			System.out.println("ERROR!!!!\n" + e);
			return;
		}

		// Manage Trust

		for (URL url : certificates.keySet()) {

			log.trace("Checking certificates for " + url.getHost());

			try {

				// Initialize Notaries by using NotaryManager
				log.trace("Initializing NotaryManager...");
				NotaryManager nm = new NotaryManager();
				// ICSINotary nm = new ICSINotary();
				// ConvergenceNotary nm = new ConvergenceNotary();

				// Install the all-trusting trust manager
				log.trace("Configuring Trust Managers...");
				final SSLContext sslContext = SSLContext.getInstance("TLS");
				sslContext.init(null,
						new TrustManager[] { nm.getTrustManager() },
						new java.security.SecureRandom());
				HttpsURLConnection.setDefaultSSLSocketFactory(sslContext
						.getSocketFactory());

				// Build objects
				log.trace("Building TLSConnectionInfo-Object...");
				TLSConnectionInfo sslinfo = new TLSConnectionInfo(
						url.toString(), url.getDefaultPort(),
						certificates.get(url));

				// Check Certificates using NotaryManager
				log.trace("-- BEGIN -- Checking Certificates...");
				log.info("Rating: " + sslinfo.validateCertificates(nm));
				if (sslinfo.isTrusted())
					log.info("Trustworthy.");
				else
					log.info("Not trustworthy.");
				log.trace("-- END -- Checking Certificates...");

			} catch (TLSCertificateException | MalformedURLException e) {
				log.error("Can'parse certificate!!! Error: " + e);
			} catch (NoSuchAlgorithmException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (KeyManagementException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		log.trace("Done.");
	}
}
